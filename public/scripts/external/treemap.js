import{tally,populate,findRoots,createLinks,buildTree,toArray}from"./util.js";function _d3(t){return t("d3@6")}function _chart2(t,e,a){const r=t.scaleSequential([8,0],t.interpolateMagma),n=t.stratify().id((function(t){return t.source})).parentId((function(t){return t.target}))(e);n.sum((function(t){return t.value}));const i=(e=>function(e,a){const r=new Map,n=new Map;return e.eachAfter((e=>{e.children?(r.set(e,1+t.max(e.children,(t=>r.get(t)))),n.set(e,1+t.max(e.children,(t=>n.get(t))))):(r.set(e,0),n.set(e,0))})).eachBefore((t=>{t.x1-=2*a*r.get(t),t.y1-=2*a*n.get(t)}))}(t.treemap().size([464,200]).paddingOuter(3).paddingTop(19).paddingInner(1).round(!0)(t.hierarchy(e).sum((t=>t.value)).sort(((t,e)=>e.value-t.value))),3))(n),l=t.create("svg").attr("height",200).attr("viewBox",[0,0,464,200]).attr("style","height: auto; overflow: visible; font: 10px sans-serif;"),d=a.uid("shadow");l.append("filter").attr("id",d.id).append("feDropShadow").attr("flood-opacity",.3).attr("dx",0).attr("stdDeviation",3);const o=l.selectAll("g").data(t.group(i,(t=>t.height))).join("g").attr("filter",d).selectAll("g").data((t=>t[1])).join("g").attr("transform",(t=>`translate(${t.x0},${t.y0})`)),s=t.format(",d");return o.append("title").text((t=>`${t.ancestors().reverse().map((t=>t.data.id)).join("\n")}\n${s(t.value)}`)),o.append("rect").attr("id",(t=>(t.nodeUid=a.uid("node")).id)).attr("fill",(t=>r(t.height))).attr("width",(t=>t.x1-t.x0)).attr("height",(t=>t.y1-t.y0)),o.append("clipPath").attr("id",(t=>(t.clipUid=a.uid("clip")).id)).append("use").attr("xlink:href",(t=>t.nodeUid.href)),o.append("text").attr("clip-path",(t=>t.clipUid)).selectAll("tspan").data((t=>t.data.id.split("\n").concat(s(t.value)))).join("tspan").attr("fill-opacity",((t,e,a)=>e===a.length-1?.7:null)).text((t=>t)),o.filter((t=>t.children)).selectAll("tspan").attr("dx",3).attr("y",13),o.filter((t=>!t.children)).selectAll("tspan").attr("x",3).attr("y",((t,e,a)=>.3*(e===a.length-1)+1.1+.9*e+"em")),l.node()}var links;export function define(t,e){const a=t.module();var r=tally(links);populate(links,r),findRoots(links);for(var n=buildTree(links),i=0;i<n.length;i++){var l=new Set;createLinks(n[i],l);var d=toArray(l),o=`links${i}`,s=`create_tree${i}`;findRoots(d),a.builtin(o,structuredClone(d)),a.variable(e(s)).define(s,["d3",o,"DOM"],_chart2)}return a.builtin("d3",_d3),a}export function link(t){links=t}