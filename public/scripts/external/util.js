export function createLinks(e,r){var t=e=>{var r=Object.assign({},structuredClone(e));return delete r.children,JSON.stringify(r)};for(const[o,n]of Object.entries(e))n&&"object"==typeof n&&(void 0!==n.source&&r.add(t(n)),createLinks(n,r))}export function tally(e){var r={};return e.map((e=>{void 0===r[e.source]?r[e.source]=1:r[e.source]+=1})),r}export function populate(e,r){e.map((e=>{e.value=r[e.source]}))}export function findRoots(e){const r=e.map((e=>e.source));return e.map((t=>{-1==r.indexOf(t.target)&&(e.push({source:t.target,target:null}),r.push(t.target))})),e}export function buildTree(e){var r=e.reduce(((e,r)=>(e.push(r.source),e)),[]);return e.filter((t=>{if(null===t.target)return t;const o=e[r.indexOf(t.target)];return void 0!==o&&(o.children=[...o.children||[],t]),t})),e.filter((e=>null==e.target))}export function toArray(e){return[...e].map((e=>"string"==typeof e?JSON.parse(e):"object"==typeof e?e:void 0))}